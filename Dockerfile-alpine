FROM python:3.13-alpine

ENV KONTAINER_HOST=0.0.0.0
ENV KONTAINER_PORT=5000
ENV PATH="/usr/local/bin:${PATH}"

ARG DOCKER_DIR=/var/lib/docker
ARG DOCKER_COMPOSE_VERSION=2.34.0


RUN apk update && apk add --no-cache \
    bash \
    curl \
    nginx \
    redis \
    supervisor \
    openssl \
    docker-cli \
    git \
    unzip \
    aws-cli \
    openssh


# Install poetry and other python tools
# https://stackoverflow.com/questions/76708329/docker-compose-no-longer-building-image-attributeerror-cython-sources
#RUN pip install --no-cache-dir --upgrade pip poetry setuptools wheel "cython<3.0.0" && \
#    pip install --no-cache-dir --no-build-isolation pyyaml===5.4.1 && \
#    pip install --no-cache-dir docker-compose
RUN pip install --no-cache-dir --upgrade pip poetry setuptools wheel


# Install docker-compose
RUN mkdir -p $DOCKER_DIR/cli-plugins && \
    ARCH=$(uname -m) && \
    COMPOSE_DOWNLOAD_URL=https://github.com/docker/compose/releases/download/v${DOCKER_COMPOSE_VERSION}/docker-compose-linux-${ARCH} && \
    echo "COMPOSE_DOWNLOAD_URL=$COMPOSE_DOWNLOAD_URL" && \
    curl -SL --fail ${COMPOSE_DOWNLOAD_URL} -o $DOCKER_DIR/cli-plugins/docker-compose && \
    chmod +x $DOCKER_DIR/cli-plugins/docker-compose && \
    ln -s $DOCKER_DIR/cli-plugins/docker-compose /usr/local/bin/docker-compose

RUN DOCKER_COMPOSE=$(which docker-compose) && \
    echo "DOCKER_COMPOSE=$DOCKER_COMPOSE"


# Install AWS CLI v2
#WORKDIR /tmp
#RUN ARCH=$(uname -m) && \
#    set -eux && \
#    curl -SL --fail "https://awscli.amazonaws.com/awscli-exe-linux-${ARCH}.zip" -o "/tmp/awscliv2.zip" && \
#    unzip /tmp/awscliv2.zip && \
#    chmod +x ./aws/install && \
#    chmod +x ./aws/dist/aws && \
#    ls -la ./aws && \
#    ls -la ./aws/dist && \
#    ./aws/install && \
#    rm -rf ./aws /tmp/awscliv2.zip
#
#RUN /usr/local/bin/aws --version && \
#    aws --version


# Set a non-root user
RUN addgroup -S appgroup && addgroup -S docker && \
    adduser -S appuser -G appgroup && \
    adduser appuser docker && \
    adduser appuser root


WORKDIR /app

# Install python dependencies
COPY ./pyproject.toml ./poetry.lock /app/
RUN poetry config virtualenvs.create false \
    && poetry install --only main --no-root


# Copy the rest of the code
COPY ./src /app/src
COPY ./bin /app/bin
COPY ./agent.py /app/agent.py
COPY ./celery_worker.sh /app/celery_worker.sh


# Configure Nginx
COPY ./docker/alpine/nginx/nginx.conf /etc/nginx/nginx.conf
COPY ./docker/nginx/site.default.conf /etc/nginx/http.d/default.conf


# Configure Supervisor
COPY ./docker/alpine/supervisor/supervisord.conf /etc/supervisord.conf
COPY ./docker/supervisor/celery_worker.ini /etc/supervisor.d/celery_worker.ini
COPY ./docker/supervisor/redis.ini /etc/supervisor.d/redis.ini
COPY ./docker/supervisor/nginx.ini /etc/supervisor.d/nginx.ini
COPY ./docker/supervisor/app.ini /etc/supervisor.d/app.ini


#ENTRYPOINT ["supervisord", "--nodaemon", "--configuration", "/etc/supervisord.conf"]
COPY ./docker/entrypoint-alpine.sh /entrypoint.sh
RUN ["chmod", "+x", "/entrypoint.sh"]
ENTRYPOINT ["/entrypoint.sh"]
CMD ["supervisor"]

RUN mkdir -p /etc/nginx/ssl/ && \
    mkdir -p /app/data/docker && \
    touch /app/data/docker/config && \
    mkdir -p /app/data/ssl && \
    mkdir -p /var/lib/redis && \
    mkdir -p /var/log/supervisor && \
    mkdir -p /var/log/nginx/ && \
    mkdir -p /var/log/redis && \
    touch /var/log/redis/redis.log && touch /run/redis/redis.pid && \
    touch /var/lib/nginx/logs/error.log && \
    touch /var/lib/nginx/logs/access.log && \
    chown -R appuser:appgroup /var/lib/nginx/logs/error.log && \
    chown -R appuser:appgroup /var/lib/nginx/logs/access.log


# Change ownership to non-root user
RUN chown -R appuser:appgroup /run && \
    chown -R appuser:appgroup /var/run && \
    chown -R appuser:appgroup /etc/supervisord.conf /etc/supervisor.d && \
    chown -R appuser:appgroup /etc/nginx/ssl && \
    chown -R appuser:appgroup /var/log/supervisor&& \
    chown -R appuser:appgroup /var/lib/nginx /var/lib/nginx/logs /run/nginx && \
    chown -R appuser:appgroup /var/lib/redis && \
    chown -R appuser:appgroup /var/log/redis/redis.log /run/redis/redis.pid && \
    chown -R appuser:appgroup /var/lib/docker/cli-plugins && \
    chown -R appuser:appgroup /usr/local/bin/docker-compose && \
    chown -R appuser:appgroup /app/data/ && \
    chown -R appuser:appgroup /app/data/docker && \
    chown -R appuser:appgroup /app/data/ssl


USER appuser

# Health check
HEALTHCHECK --interval=60s --timeout=3s --retries=3 \
 CMD curl --fail http://localhost:${KONTAINER_PORT}/ || exit 1


EXPOSE ${KONTAINER_PORT}
EXPOSE 3080
EXPOSE 3443
