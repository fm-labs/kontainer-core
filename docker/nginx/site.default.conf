
upstream api_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response

  #server unix:/app/run/gunicorn.sock fail_timeout=0;
  server 127.0.0.1:5000 fail_timeout=0;
}

#   server {
#     # if no Host match, close the connection to prevent host spoofing
#     listen 80 default_server;
#     return 444;
#   }

server {
    # use 'listen 80 deferred;' for Linux
    # use 'listen 80 accept_filter=httpready;' for FreeBSD
    # listen 8880;
    listen 3080 deferred;
    listen [::]:3080 deferred;
    listen 3443 ssl;

    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;

    client_max_body_size 4G;

    server_name _;
    keepalive_timeout 5;
    root /app/www;
    index index.html;

    location / {
        try_files $uri $uri/ /index.html;
    }

    location /api {
      # checks for static file, if not found proxy to app
      try_files $uri @proxy_to_app;
    }

    location /favicon.ico {
        alias /app/www/favicon.ico;
        access_log off;
    }

    location @proxy_to_app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;
      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;
      proxy_pass http://api_server;
      # timeouts
      proxy_connect_timeout 10s;
      proxy_read_timeout 300s;
      proxy_send_timeout 60s;
    }

    error_page 500 502 503 504 /500.html;
    location = /500.html {
      root /app/www;
    }
}